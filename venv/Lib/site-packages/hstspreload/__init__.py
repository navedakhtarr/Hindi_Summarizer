"""Check if a host is in the Google Chrome HSTS Preload list"""

import functools
import os
import typing

__version__ = "2022.8.1"
__checksum__ = "ba702ad4fdcc81fe51af1d63e8b9df136321f5a279e0fa57e9ba1edfedbba64d"
__all__ = ["in_hsts_preload"]

# fmt: off
_GTLD_INCLUDE_SUBDOMAINS = {b'android', b'app', b'bank', b'boo', b'channel', b'chrome', b'dad', b'day', b'dev', b'eat', b'esq', b'fly', b'foo', b'gle', b'gmail', b'google', b'hangout', b'ing', b'insurance', b'meet', b'meme', b'new', b'nexus', b'page', b'phd', b'play', b'prof', b'rsvp', b'search', b'youtube'}  # noqa: E501
_JUMPTABLE = [[(0, 11), (11, 10), (21, 16), (37, 61), (98, 26), (124, 12), None, (136, 19), (155, 22), (177, 7), (184, 20), (204, 18), None, (222, 29), (251, 45), (296, 7), (303, 9), (312, 36), (348, 16), (364, 10), (374, 28), None, (402, 62), (464, 8), (472, 18), (490, 19), (509, 13), (522, 14), (536, 14), None, None, (550, 33), (583, 20), (603, 35), (638, 14), (652, 32), (684, 17), (701, 9), (710, 25), (735, 20), (755, 8), (763, 13), (776, 10), None, (786, 17), (803, 6), (809, 26), (835, 10), (845, 5), (850, 19), (869, 14), (883, 11), (894, 12), (906, 27), None, (933, 24), (957, 11), (968, 7), (975, 29), (1004, 18), (1022, 27), (1049, 46), (1095, 25), (1120, 16), (1136, 18), (1154, 5), (1159, 22), (1181, 18), None, (1199, 36), (1235, 15), (1250, 8), (1258, 11), None, (1269, 5), (1274, 16), (1290, 14), (1304, 18), None, (1322, 20), (1342, 26), (1368, 48), (1416, 19), (1435, 12), (1447, 59), (1506, 14), (1520, 14), (1534, 20), None, (1554, 10), (1564, 13), (1577, 20), (1597, 29), None, (1626, 13), (1639, 19), (1658, 11), (1669, 4), (1673, 22), (1695, 10), (1705, 13), (1718, 14), (1732, 28), (1760, 11), (1771, 21), (1792, 12), (1804, 32), None, (1836, 10), (1846, 14), (1860, 19), (1879, 45), (1924, 15), None, (1939, 11), (1950, 23), (1973, 21), (1994, 26), (2020, 6), (2026, 6), (2032, 7), (2039, 5), (2044, 30), (2074, 23), (2097, 35), (2132, 17), (2149, 15), (2164, 19), (2183, 12), (2195, 70), (2265, 55), (2320, 12), (2332, 23), (2355, 16), (2371, 38), (2409, 6), (2415, 20), (2435, 44), (2479, 6), (2485, 41), (2526, 13), (2539, 23), (2562, 36), (2598, 20), (2618, 8), (2626, 15), (2641, 12), (2653, 19), (2672, 25), (2697, 15), None, (2712, 35), (2747, 21), (2768, 17), (2785, 19), (2804, 26), (2830, 5), (2835, 37), (2872, 39), (2911, 16), (2927, 10), (2937, 17), (2954, 23), (2977, 14), (2991, 17), (3008, 8), (3016, 8), (3024, 7), (3031, 29), (3060, 6), (3066, 18), (3084, 32), (3116, 20), (3136, 17), (3153, 24), (3177, 12), (3189, 40), (3229, 40), (3269, 12), (3281, 48), (3329, 32), (3361, 17), None, (3378, 8), (3386, 25), (3411, 25), (3436, 6), (3442, 23), None, (3465, 36), (3501, 33), (3534, 14), (3548, 16), (3564, 27), None, (3591, 30), (3621, 41), (3662, 50), (3712, 15), (3727, 20), (3747, 25), (3772, 21), (3793, 32), (3825, 24), (3849, 20), (3869, 17), (3886, 60), (3946, 19), (3965, 9), (3974, 12), (3986, 12), (3998, 11), (4009, 10), (4019, 48), (4067, 42), None, (4109, 25), (4134, 28), None, (4162, 8), (4170, 8), (4178, 7), None, (4185, 25), (4210, 17), None, (4227, 21), (4248, 35), (4283, 21), (4304, 10), (4314, 41), (4355, 20), (4375, 31), (4406, 23), (4429, 19), (4448, 12), (4460, 5), (4465, 30), (4495, 29), (4524, 14), (4538, 14), (4552, 47), (4599, 52), None, None, (4651, 51), (4702, 42), None, (4744, 18), None, (4762, 15), (4777, 8), (4785, 21), (4806, 6), (4812, 16), (4828, 17)], [(4845, 9674), (14519, 10164), (24683, 10387), (35070, 9337), (44407, 9600), (54007, 9223), (63230, 10306), (73536, 9293), (82829, 10362), (93191, 9625), (102816, 10616), (113432, 9632), (123064, 10245), (133309, 11218), (144527, 9968), (154495, 10344), (164839, 10800), (175639, 10090), (185729, 9940), (195669, 9248), (204917, 10321), (215238, 9755), (224993, 10140), (235133, 10064), (245197, 10349), (255546, 9794), (265340, 10172), (275512, 10254), (285766, 9307), (295073, 9900), (304973, 10461), (315434, 9832), (325266, 9879), (335145, 9933), (345078, 9263), (354341, 10028), (364369, 9894), (374263, 10711), (384974, 10723), (395697, 10512), (406209, 10866), (417075, 9478), (426553, 9758), (436311, 9933), (446244, 9922), (456166, 10169), (466335, 9941), (476276, 11079), (487355, 9977), (497332, 9111), (506443, 9726), (516169, 10437), (526606, 10362), (536968, 9978), (546946, 10449), (557395, 9947), (567342, 10280), (577622, 10111), (587733, 10060), (597793, 8539), (606332, 9914), (616246, 9983), (626229, 9742), (635971, 10239), (646210, 10251), (656461, 10442), (666903, 9640), (676543, 10450), (686993, 10509), (697502, 10229), (707731, 9963), (717694, 9623), (727317, 9053), (736370, 10297), (746667, 9989), (756656, 10575), (767231, 9265), (776496, 10862), (787358, 9880), (797238, 9553), (806791, 10232), (817023, 8977), (826000, 9640), (835640, 10041), (845681, 9592), (855273, 10154), (865427, 10899), (876326, 9794), (886120, 10176), (896296, 10041), (906337, 10984), (917321, 9291), (926612, 9847), (936459, 9641), (946100, 9923), (956023, 10559), (966582, 10151), (976733, 9705), (986438, 10028), (996466, 9504), (1005970, 9701), (1015671, 10092), (1025763, 9792), (1035555, 9678), (1045233, 9728), (1054961, 10158), (1065119, 10498), (1075617, 10232), (1085849, 11066), (1096915, 10275), (1107190, 10404), (1117594, 10214), (1127808, 9635), (1137443, 9892), (1147335, 10279), (1157614, 10074), (1167688, 9904), (1177592, 10027), (1187619, 9825), (1197444, 10857), (1208301, 10543), (1218844, 10002), (1228846, 10086), (1238932, 10428), (1249360, 11079), (1260439, 9979), (1270418, 9512), (1279930, 10779), (1290709, 10086), (1300795, 11622), (1312417, 10852), (1323269, 9807), (1333076, 10029), (1343105, 9681), (1352786, 9732), (1362518, 10225), (1372743, 9504), (1382247, 10511), (1392758, 9554), (1402312, 9730), (1412042, 10519), (1422561, 10372), (1432933, 9544), (1442477, 9728), (1452205, 10585), (1462790, 9525), (1472315, 9929), (1482244, 9808), (1492052, 9560), (1501612, 10503), (1512115, 10183), (1522298, 10205), (1532503, 10241), (1542744, 9487), (1552231, 10018), (1562249, 10283), (1572532, 9842), (1582374, 10252), (1592626, 9628), (1602254, 9186), (1611440, 9171), (1620611, 10203), (1630814, 10585), (1641399, 9428), (1650827, 9951), (1660778, 11040), (1671818, 10103), (1681921, 9660), (1691581, 10636), (1702217, 9905), (1712122, 9318), (1721440, 9925), (1731365, 11514), (1742879, 9380), (1752259, 9419), (1761678, 10567), (1772245, 9921), (1782166, 10437), (1792603, 9749), (1802352, 9419), (1811771, 12350), (1824121, 10053), (1834174, 10041), (1844215, 10114), (1854329, 10824), (1865153, 11081), (1876234, 9343), (1885577, 10461), (1896038, 9965), (1906003, 9856), (1915859, 10835), (1926694, 9321), (1936015, 10053), (1946068, 9772), (1955840, 10038), (1965878, 9896), (1975774, 9823), (1985597, 9399), (1994996, 9868), (2004864, 9732), (2014596, 10312), (2024908, 9872), (2034780, 10883), (2045663, 9882), (2055545, 10579), (2066124, 10581), (2076705, 9299), (2086004, 10340), (2096344, 10200), (2106544, 10158), (2116702, 10397), (2127099, 10301), (2137400, 10244), (2147644, 9993), (2157637, 10469), (2168106, 9977), (2178083, 9465), (2187548, 10054), (2197602, 9732), (2207334, 10745), (2218079, 9716), (2227795, 9231), (2237026, 10839), (2247865, 10120), (2257985, 10165), (2268150, 9930), (2278080, 9950), (2288030, 9423), (2297453, 10322), (2307775, 10143), (2317918, 10808), (2328726, 9864), (2338590, 9510), (2348100, 10540), (2358640, 9932), (2368572, 10857), (2379429, 9701), (2389130, 9302), (2398432, 8986), (2407418, 10610), (2418028, 10248), (2428276, 10430), (2438706, 10125), (2448831, 10188), (2459019, 9672), (2468691, 10632), (2479323, 10212), (2489535, 9237), (2498772, 9920), (2508692, 9565), (2518257, 10082), (2528339, 10584), (2538923, 10483), (2549406, 9680), (2559086, 9887), (2568973, 10099)], [(2579072, 1136), (2580208, 918), (2581126, 933), (2582059, 1170), (2583229, 823), (2584052, 969), (2585021, 816), (2585837, 1175), (2587012, 861), (2587873, 942), (2588815, 698), (2589513, 756), (2590269, 1042), (2591311, 1095), (2592406, 1123), (2593529, 1226), (2594755, 1446), (2596201, 818), (2597019, 1086), (2598105, 960), (2599065, 1158), (2600223, 996), (2601219, 1173), (2602392, 979), (2603371, 1034), (2604405, 821), (2605226, 1274), (2606500, 1482), (2607982, 1010), (2608992, 1039), (2610031, 1189), (2611220, 1076), (2612296, 812), (2613108, 983), (2614091, 1196), (2615287, 1033), (2616320, 916), (2617236, 1060), (2618296, 1017), (2619313, 1270), (2620583, 951), (2621534, 1183), (2622717, 924), (2623641, 994), (2624635, 973), (2625608, 734), (2626342, 1161), (2627503, 1239), (2628742, 936), (2629678, 651), (2630329, 1007), (2631336, 965), (2632301, 1060), (2633361, 1229), (2634590, 1569), (2636159, 781), (2636940, 911), (2637851, 918), (2638769, 821), (2639590, 981), (2640571, 994), (2641565, 1063), (2642628, 1286), (2643914, 1155), (2645069, 880), (2645949, 1041), (2646990, 913), (2647903, 658), (2648561, 863), (2649424, 1079), (2650503, 950), (2651453, 1082), (2652535, 793), (2653328, 977), (2654305, 854), (2655159, 931), (2656090, 843), (2656933, 910), (2657843, 945), (2658788, 719), (2659507, 1057), (2660564, 846), (2661410, 1177), (2662587, 814), (2663401, 994), (2664395, 809), (2665204, 963), (2666167, 1075), (2667242, 1054), (2668296, 1016), (2669312, 1218), (2670530, 1360), (2671890, 1192), (2673082, 934), (2674016, 1005), (2675021, 719), (2675740, 1126), (2676866, 985), (2677851, 845), (2678696, 867), (2679563, 1045), (2680608, 1124), (2681732, 1104), (2682836, 753), (2683589, 896), (2684485, 1040), (2685525, 707), (2686232, 691), (2686923, 1225), (2688148, 1231), (2689379, 998), (2690377, 952), (2691329, 942), (2692271, 1029), (2693300, 1039), (2694339, 978), (2695317, 854), (2696171, 818), (2696989, 901), (2697890, 848), (2698738, 1320), (2700058, 944), (2701002, 969), (2701971, 675), (2702646, 998), (2703644, 1046), (2704690, 957), (2705647, 1210), (2706857, 923), (2707780, 1262), (2709042, 1041), (2710083, 855), (2710938, 1097), (2712035, 891), (2712926, 1089), (2714015, 1049), (2715064, 951), (2716015, 919), (2716934, 990), (2717924, 816), (2718740, 906), (2719646, 935), (2720581, 958), (2721539, 760), (2722299, 793), (2723092, 695), (2723787, 866), (2724653, 820), (2725473, 942), (2726415, 850), (2727265, 943), (2728208, 805), (2729013, 740), (2729753, 1153), (2730906, 1013), (2731919, 929), (2732848, 954), (2733802, 1172), (2734974, 968), (2735942, 859), (2736801, 1259), (2738060, 928), (2738988, 944), (2739932, 1072), (2741004, 1287), (2742291, 875), (2743166, 847), (2744013, 912), (2744925, 908), (2745833, 883), (2746716, 1002), (2747718, 797), (2748515, 1212), (2749727, 952), (2750679, 1098), (2751777, 1148), (2752925, 919), (2753844, 809), (2754653, 975), (2755628, 932), (2756560, 2130), (2758690, 811), (2759501, 950), (2760451, 924), (2761375, 1251), (2762626, 890), (2763516, 957), (2764473, 872), (2765345, 785), (2766130, 1149), (2767279, 850), (2768129, 809), (2768938, 983), (2769921, 1087), (2771008, 1158), (2772166, 1035), (2773201, 930), (2774131, 848), (2774979, 1023), (2776002, 890), (2776892, 1023), (2777915, 882), (2778797, 1021), (2779818, 860), (2780678, 959), (2781637, 792), (2782429, 1028), (2783457, 1208), (2784665, 913), (2785578, 1187), (2786765, 961), (2787726, 998), (2788724, 1165), (2789889, 1277), (2791166, 1035), (2792201, 960), (2793161, 1163), (2794324, 885), (2795209, 810), (2796019, 612), (2796631, 950), (2797581, 1149), (2798730, 742), (2799472, 1276), (2800748, 775), (2801523, 954), (2802477, 1001), (2803478, 1112), (2804590, 1177), (2805767, 944), (2806711, 1121), (2807832, 806), (2808638, 1121), (2809759, 870), (2810629, 759), (2811388, 826), (2812214, 845), (2813059, 530), (2813589, 980), (2814569, 1220), (2815789, 1000), (2816789, 886), (2817675, 813), (2818488, 780), (2819268, 1087), (2820355, 792), (2821147, 802), (2821949, 1109), (2823058, 649), (2823707, 1137), (2824844, 2604), (2827448, 849), (2828297, 909), (2829206, 1152), (2830358, 1165), (2831523, 653)], [(2832176, 48), None, (2832224, 35), (2832259, 42), None, None, None, None, None, None, None, None, None, None, None, None, None, (2832301, 42), None, (2832343, 25), (2832368, 44), (2832412, 22), (2832434, 33), None, None, None, None, (2832467, 26), None, None, None, None, (2832493, 21), (2832514, 25), None, (2832539, 21), (2832560, 26), None, None, None, None, (2832586, 71), (2832657, 21), (2832678, 23), None, None, None, None, (2832701, 48), None, None, None, None, None, (2832749, 31), None, None, None, None, (2832780, 42), None, (2832822, 22), None, (2832844, 21), None, (2832865, 26), (2832891, 56), None, None, (2832947, 77), (2833024, 27), None, None, None, None, (2833051, 21), (2833072, 21), None, None, (2833093, 34), (2833127, 42), None, None, None, (2833169, 25), None, None, (2833194, 21), None, None, None, None, None, (2833215, 24), (2833239, 21), None, None, (2833260, 26), None, (2833286, 18), None, (2833304, 54), None, None, None, None, None, None, (2833358, 26), None, None, None, (2833384, 20), None, None, (2833404, 64), (2833468, 42), (2833510, 17), (2833527, 17), (2833544, 26), None, (2833570, 45), None, None, None, (2833615, 26), (2833641, 20), (2833661, 26), None, (2833687, 42), (2833729, 63), None, None, None, (2833792, 40), (2833832, 48), None, None, None, (2833880, 47), None, None, None, None, None, None, None, (2833927, 42), None, (2833969, 80), None, (2834049, 9), None, (2834058, 21), (2834079, 42), None, None, (2834121, 65), (2834186, 82), (2834268, 21), None, (2834289, 72), None, None, (2834361, 24), (2834385, 21), None, None, None, None, None, (2834406, 42), (2834448, 21), (2834469, 21), None, (2834490, 42), (2834532, 25), None, (2834557, 38), (2834595, 21), (2834616, 56), None, None, (2834672, 21), (2834693, 19), (2834712, 26), None, (2834738, 16), None, (2834754, 21), None, None, (2834775, 38), None, (2834813, 22), (2834835, 21), (2834856, 21), (2834877, 21), None, (2834898, 63), None, (2834961, 21), (2834982, 42), None, (2835024, 17), None, None, None, None, (2835041, 21), (2835062, 21), None, None, (2835083, 21), None, None, (2835104, 21), None, (2835125, 26), None, (2835151, 50), (2835201, 22), None, None, (2835223, 50), (2835273, 26), (2835299, 21), (2835320, 21), (2835341, 19), None, (2835360, 35), (2835395, 26), (2835421, 23), (2835444, 39), (2835483, 42), None, None, None, None, None, None, (2835525, 21), None, None, None, (2835546, 21), None, None, (2835567, 90), None, (2835657, 239), (2835896, 38), None, None, None, None]]  # noqa: E501
_CRC8_TABLE = [
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
    0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65,
    0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5,
    0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85,
    0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
    0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2,
    0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
    0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2,
    0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32,
    0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
    0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42,
    0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
    0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c,
    0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec,
    0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
    0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c,
    0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
    0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c,
    0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b,
    0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
    0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b,
    0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
    0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb,
    0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb,
    0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
]
# fmt: on

_IS_LEAF = 0x80
_INCLUDE_SUBDOMAINS = 0x40


try:
    from importlib.resources import open_binary

    def open_pkg_binary(path: str) -> typing.BinaryIO:
        return open_binary("hstspreload", path)


except ImportError:

    def open_pkg_binary(path: str) -> typing.BinaryIO:
        return open(
            os.path.join(os.path.dirname(os.path.abspath(__file__)), path),
            "rb",
        )


@functools.lru_cache(maxsize=1024)
def in_hsts_preload(host: typing.AnyStr) -> bool:
    """Determines if an IDNA-encoded host is on the HSTS preload list"""

    if isinstance(host, str):
        host = host.encode("ascii")
    labels = host.lower().split(b".")

    # Fast-branch for gTLDs that are registered to preload all sub-domains.
    if labels[-1] in _GTLD_INCLUDE_SUBDOMAINS:
        return True

    with open_pkg_binary("hstspreload.bin") as f:
        for layer, label in enumerate(labels[::-1]):
            # None of our layers are greater than 4 deep.
            if layer > 3:
                return False

            # Read the jump table for the layer and label
            jump_info = _JUMPTABLE[layer][_crc8(label)]
            if jump_info is None:
                # No entry: host is not preloaded
                return False

            # Read the set of entries for that layer and label
            f.seek(jump_info[0])
            data = bytearray(jump_info[1])
            f.readinto(data)

            for is_leaf, include_subdomains, ent_label in _iter_entries(data):
                # We found a potential leaf
                if is_leaf:
                    if ent_label == host:
                        return True
                    if include_subdomains and host.endswith(b"." + ent_label):
                        return True

                # Continue traversing as we're not at a leaf.
                elif label == ent_label:
                    break
            else:
                return False
    return False


def _iter_entries(data: bytes) -> typing.Iterable[typing.Tuple[int, int, bytes]]:
    while data:
        flags = data[0]
        size = data[1]
        label = bytes(data[2 : 2 + size])
        yield (flags & _IS_LEAF, flags & _INCLUDE_SUBDOMAINS, label)
        data = data[2 + size :]


def _crc8(value: bytes) -> int:
    # CRC8 reference implementation: https://github.com/niccokunzmann/crc8
    checksum = 0x00
    for byte in value:
        checksum = _CRC8_TABLE[checksum ^ byte]
    return checksum
